from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import direction_keyboard
from utils.sheets import write_checkin, write_checkout
from utils.drive import save_volunteer_photo
from utils.db import AsyncDB
from config import BOT_TOKEN, IMAGES_DIR, BASE_URL
from datetime import datetime
from aiogram.filters import Command
from aiogram.filters import CommandStart
import os
from utils.bot_instance import bot 

router = Router()

DB_PATH = "data/user_states.db"
os.makedirs("data", exist_ok=True)
db = AsyncDB(DB_PATH)

class CheckinStates(StatesGroup):
    waiting_photo = State()
    waiting_direction = State()
    checked_in = State()

@router.message((Command("start")))
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    await state.clear()
    await db.delete_state(user_id)
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (—Å–µ–ª—Ñ–∏).\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á–µ–∫-–∏–Ω, –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start –µ—â—ë —Ä–∞–∑!"
    )
    await message.answer(text)

@router.message()
async def handle_photo(message: Message, state: FSMContext):
    if message.media_group_id:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ *–æ–¥–Ω—É* —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –Ω–µ –∞–ª—å–±–æ–º!", parse_mode="Markdown")
        return
    if message.content_type != "photo":
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    user_id = str(message.from_user.id)
    username = message.from_user.username or f"id_{user_id}"
    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    current_time = now.strftime("%H:%M")
    full_name = message.from_user.full_name

    fsm_data = await state.get_data()
    user_state = await db.get_state(user_id)
    wait_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚òÅÔ∏èüì∏")

    try:
        is_checkin = not user_state or user_state[5] != "completed_checkin"
        photo_drive_url = await save_volunteer_photo(
            bot,
            message.photo[-1].file_id,
            full_name,
            is_checkin
        )
        if not photo_drive_url:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return
    finally:
        try:
            await wait_msg.delete()
        except Exception:
            pass

    if not user_state or user_state[7] != today:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=direction_keyboard())
        await db.save_state(user_id, {
            "username": username,
            "name": full_name,
            "direction": None,
            "step": "awaiting_direction",
            "photo_checkin": photo_drive_url,
            "date": today,
            "time_checkin": current_time,
            "checkin_datetime": now.strftime("%Y-%m-%d %H:%M:%S")
        })
        await state.set_state(CheckinStates.waiting_direction)
        await state.update_data(photo_checkin=photo_drive_url, username=username, name=full_name, date=today, time_checkin=current_time, checkin_datetime=now.strftime("%Y-%m-%d %H:%M:%S"))
    elif user_state[5] == "completed_checkin":
        write_checkout(username, current_time, photo_drive_url)
        await message.answer("–°–ø–∞—Å–∏–±–æ, —Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã üí´ \n\n–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏ (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç –µ—â—ë —Ä–∞–∑)")
        await db.delete_state(user_id)
        await state.clear()
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ üëá")

@router.callback_query(F.data.in_(["–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã", "–û–±—Ä–∞–∑–æ–≤–∞–ª–∫–∞", "–ò–≤–µ–Ω—Ç"]))
async def handle_direction(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user_state = await db.get_state(user_id)
    if not user_state or user_state[5] != "awaiting_direction":
        return

    direction = callback.data
    updated_data = {
        "username": user_state[2],
        "name": callback.from_user.full_name,
        "direction": direction,
        "step": "completed_checkin",
        "photo_checkin": user_state[6],
        "date": user_state[7],
        "time_checkin": user_state[8],
        "checkin_datetime": user_state[9]
    }
    await db.save_state(user_id, updated_data)
    await state.set_state(CheckinStates.checked_in)
    await state.update_data(direction=direction)

    write_checkin(
        user_id=user_id,
        username=user_state[2],
        name=callback.from_user.full_name,
        direction=direction,
        time=user_state[8],
        photo_file_id=user_state[6]
    )
    await callback.message.edit_text(
        "–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã ‚úÖ\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç –∑–∞–Ω–æ–≤–æ)"
    )