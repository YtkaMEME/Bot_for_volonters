from datetime import datetime, timedelta
from utils.sheets import mark_incomplete_shift
from utils.db import AsyncDB
from aiogram import Bot
import asyncio
import logging
from config import REMINDER_INTERVAL_HOURS, INCOMPLETE_INTERVAL_HOURS, CHECK_INTERVAL_SECONDS

async def check_user_states(bot: Bot, db: AsyncDB):
    while True:
        now = datetime.now()
        states = await db.get_all_states()

        for state in states:
            user_id = state[1]
            step = state[5]
            checkin_str = state[9]
            username = state[2]
            if step != "completed_checkin":
                continue
            if not checkin_str:
                continue
            try:
                checkin_time = datetime.strptime(checkin_str, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                continue
            time_diff = now - checkin_time
            try:
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —á–∞—Å–æ–≤
                if timedelta(minutes=3) < time_diff <= timedelta(minutes=5):
                    await bot.send_message(int(user_id), "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É!")
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ ‚Äî —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫-–∏–Ω–∞
                elif time_diff > timedelta(minutes=5):
                    mark_incomplete_shift(username)
                    await bot.send_message(int(user_id), "üò¢ –¢—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. –°–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ –¥–ª—è —á–µ–∫-–∏–Ω–∞.")
                    await db.delete_state(user_id)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)