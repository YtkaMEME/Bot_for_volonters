import gspread
from oauth2client.service_account import ServiceAccountCredentials
from config import GOOGLE_SHEET_NAME, GOOGLE_CREDS_JSON
from datetime import datetime, timedelta

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDS_JSON, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ Telegram username (–≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Å—ã–ª–∫–∏) –∏ –¥–∞—Ç–µ
def find_row_by_user_and_date(username, date_str):
    link = f"https://t.me/{username}"
    data = sheet.get_all_records()
    for idx, row in enumerate(data, start=2):  # –° —É—á—ë—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if row["Telegram —Ç–µ–≥"] == link and row["–î–∞—Ç–∞ —Å–º–µ–Ω—ã"] == date_str:
            return idx
    return None

# –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ–∫-–∏–Ω–∞ –±–µ–∑ —á–µ–∫-–∞—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
def find_nearest_checkin_row(username, checkout_time):
    link = f"https://t.me/{username}"
    data = sheet.get_all_records()
    min_diff = timedelta(days=9999)
    nearest_idx = None
    checkout_dt = datetime.strptime(checkout_time, "%Y-%m-%d %H:%M:%S")
    for idx, row in enumerate(data, start=2):
        if row["Telegram —Ç–µ–≥"] == link:
            checkin_time = row.get("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            checkout_cell = row.get("–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
            if checkin_time and (not checkout_cell or checkout_cell == ""):
                try:
                    checkin_dt = datetime.strptime(row["–î–∞—Ç–∞ —Å–º–µ–Ω—ã"] + " " + checkin_time, "%Y-%m-%d %H:%M")
                except Exception:
                    continue
                diff = abs((checkout_dt - checkin_dt).total_seconds())
                if diff < min_diff.total_seconds():
                    min_diff = timedelta(seconds=diff)
                    nearest_idx = idx
    return nearest_idx

# –ß–µ–∫-–∏–Ω: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —á–µ–∫-–∞—É—Ç–∞
def write_checkin(user_id, username, name, direction, time, photo_file_id):
    date_str = datetime.now().strftime("%Y-%m-%d")
    tg_link = f"https://t.me/{username}"
    sheet.append_row([
        tg_link, name, date_str, direction, time, "", photo_file_id, ""
    ])

# –ß–µ–∫-–∞—É—Ç: –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —á–µ–∫-–∏–Ω –±–µ–∑ —á–µ–∫-–∞—É—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞
def write_checkout(username, time, photo_file_id):
    now = datetime.now()
    checkout_time = now.strftime("%Y-%m-%d %H:%M:%S")
    row = find_nearest_checkin_row(username, checkout_time)
    if row:
        sheet.update(f"F{row}", [[time]])          # –í–†–ï–ú–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –†–ê–ë–û–¢–´
        sheet.update(f"H{row}", [[photo_file_id]]) # –§–û–¢–û–ì–†–ê–§–ò–Ø –ö–û–ù–¶–ê –†–ê–ë–û–¢–´
    else:
        print(f"‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {username} –¥–ª—è —á–µ–∫-–∞—É—Ç–∞ (–ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π)")

def mark_incomplete_shift(username):
    from datetime import datetime
    date_str = datetime.now().strftime("%Y-%m-%d")
    row = find_row_by_user_and_date(username, date_str)
    if row:
        sheet.update(f"F{row}", [["–ù–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É"]])  # –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        sheet.update(f"H{row}", [["‚Äî"]])                 # –§–æ—Ç–æ —á–µ–∫-–∞—É—Ç–∞
        print(f"üü° –û—Ç–º–µ—Ç–∫–∞ '–ù–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É' –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è {username}")